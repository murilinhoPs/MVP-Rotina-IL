{"version":3,"sources":["components/avatarPlaceholder/index.js","components/dropzone/index.js","components/todoList/index.js","components/todoComponent/index.js","pages/todoDaily/index.js","pages/weeklyTodo/index.js","serviceWorker.js","index.js"],"names":["AvatarPlaceholder","iconSize","className","size","Dropzone","ListItems","props","items","useState","setValue","listItems","map","item","key","type","id","value","text","multiple","onChange","inputEvent","setUpdate","target","console","log","onClick","deleteItem","icon","duration","easing","library","add","faTrash","TodoComponent","setItems","currentItem","setCurrentItem","onSubmit","preventDefault","newItem","newItems","placeholder","Date","now","filteredItems","filter","TodoDaily","day","WeeklyTodo","isMobile","setIsMobile","printableRef","useRef","handlePrint","useReactToPrint","content","current","useEffect","verifyWidth","window","outerWidth","addEventListener","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d66d4dff.chunk.js","sourcesContent":["import React from \"react\";\nimport './styles.css';\nimport { FaFileImage, FaRegFileImage, FaFileUpload, FaUserCircle } from 'react-icons/fa'\n\nconst AvatarPlaceholder = ({ iconSize}) => {\n  return (\n    <div className=\"DropContainer2\" >\n      <FaUserCircle className=\"Icon2\" size={iconSize}/>\n      <text>+</text>\n    </div>\n  );\n};\n\nexport default AvatarPlaceholder;\n","import React from \"react\";\nimport './styles.css'\nimport { FaFileImage, FaRegFileImage, FaFileUpload } from 'react-icons/fa'\n\nconst Dropzone = ({ iconSize}) => {\n  return (\n    <div className=\"DropContainer\" >\n      <FaFileImage className=\"Icon\" size={iconSize}/>\n      <text>+</text>\n    </div>\n  );\n};\n\nexport default Dropzone;\n","import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport AvatarPlaceholder from '../avatarPlaceholder/index';\r\nimport Dropzone from '../dropzone/index';\r\nimport { FaFileImage, FaRegFileImage, FaFileUpload } from 'react-icons/fa'\r\n\r\n\r\nconst ListItems = (props) => {\r\n  const items = props.items;\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  \r\n  const listItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <div className=\"MyDisplay\">\r\n\r\n          <AvatarPlaceholder iconSize=\"30px\" />\r\n\r\n            <input\r\n              type=\"text\"\r\n              id={item.key}\r\n              value={item.text}\r\n              multiple={true}\r\n              onChange={(inputEvent) => {\r\n                props.setUpdate(inputEvent.target.value, item.key);\r\n                setValue(inputEvent.target.value);\r\n                console.log(inputEvent.target.value);\r\n              }}\r\n            />\r\n            <span>\r\n              <FontAwesomeIcon\r\n                className=\"faicons\"\r\n                onClick={() => {\r\n                  props.deleteItem(item.key);\r\n                }}\r\n                icon=\"trash\"\r\n              />\r\n            </span>\r\n          </div>\r\n          <Dropzone iconSize=\"35px\"/>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport ListItems from \"../todoList\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash);\n\nconst TodoComponent = () => {\n  const [items, setItems] = useState([]);\n\n  const [currentItem, setCurrentItem] = useState({\n    text: \"\",\n    key: \"\",\n  });\n\n  function addItem(inputEvent) {\n    inputEvent.preventDefault();\n\n    const newItem = currentItem;\n\n    // if (newItem.text !== \"\") {\n    const newItems = [...items, newItem];\n\n    setItems(newItems);\n\n    setCurrentItem({\n      text: \"\",\n      key: \"\",\n    });\n    // }\n  }\n\n  function handleInput(inputEvent) {\n    setCurrentItem({\n      text: inputEvent.target.value,\n      key: Date.now(),\n    });\n  }\n\n  function deleteItem(key) {\n    const filteredItems = items.filter((item) => item.key !== key);\n\n    setItems(filteredItems);\n  }\n\n  function setUpdate(text, key) {\n    console.log(\"items:\" + items);\n    const newItems = items;\n\n    newItems.map((item) => {\n      if (item.key === key) {\n        console.log(item.key + \"    \" + key);\n\n        item.text = text;\n\n        console.log(item.text);\n\n        setItems(newItems);\n      }\n    });\n\n    setItems(newItems);\n  }\n\n  return (\n    <div className=\"TodoContainer\">\n      <header>\n        <form id=\"to-do-form\" onSubmit={addItem}>\n          <input\n            type=\"text\"\n            placeholder=\"Tarefa\"\n            value={currentItem.text}\n            onChange={handleInput}\n          ></input>\n          <button type=\"submit\">+</button>\n        </form>\n      </header>\n\n      <ListItems items={items} deleteItem={deleteItem} setUpdate={setUpdate} />\n    </div>\n  );\n};\n\nexport default TodoComponent;\n","import React from \"react\";\nimport \"./styles.css\";\nimport TodoComponent from \"../../components/todoComponent/index\";\n\nexport const TodoDaily = ({ day }) => {\n\n  return (\n    <div className=\"DayContainer\">\n      <header className=\"DayName\">{day}</header>\n      <div className=\"DayTodo\">\n        <TodoComponent />\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useReactToPrint } from \"react-to-print\";\n\nimport \"./styles.css\";\nimport { TodoDaily } from \"../todoDaily/\";\n\nconst WeeklyTodo = () => {\n  const [isMobile, setIsMobile] = useState(false);\n\n  const printableRef = useRef();\n\n  const handlePrint = useReactToPrint({\n    content: () => printableRef.current,\n  });\n\n  useEffect(() => {\n    const verifyWidth = () => {\n      setIsMobile(window.outerWidth <= 768);\n\n      console.log(isMobile);\n    };\n\n    window.addEventListener(\"resize\", verifyWidth);\n\n    verifyWidth();\n  });\n\n  return (\n    <>\n    <button className=\"PrintButton\" onClick={handlePrint}>Imprimir</button>\n      <div className=\"container\" ref={printableRef}>\n        <TodoDaily day=\"Segunda\" />\n        <TodoDaily day=\"Terça\" />\n        <TodoDaily day=\"Quarta\" />\n        <TodoDaily day=\"Quinta\" />\n        <TodoDaily day=\"Sexta\" />\n        <TodoDaily day=\"Sábado\" />\n        <TodoDaily day=\"Domingo\" />\n      </div>\n    </>\n  );\n};\n\nexport default WeeklyTodo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport WeeklyTodo from './pages/weeklyTodo/index';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<WeeklyTodo />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}